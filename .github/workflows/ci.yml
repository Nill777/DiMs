# Имя всего воркфлоу
name: Testing CI/CD Pipeline

# Секция 'on' определяет, какие события в репозитории будут запускать этот воркфлоу
on:
  # Запускать при отправке коммитов в любую из этих веток
  push:
    branches: [ main, master, develop ]
  # Запускать при создании или обновлении Pull Request, который нацелен на эти ветки
  pull_request:
    branches: [ main, master ]

# Секция 'jobs' определяет задачи
jobs:
  unit-tests:
    # Имя задачи, которое будет отображаться в UI
    name: Unit Tests
    # Тип виртуальной машины, на которой будет выполняться задача
    # 'ubuntu-latest' — стандартный и дешевый раннер для задач, не требующих GUI
    runs-on: ubuntu-latest
    steps:
      # Шаг 1: Скачивание кода репозитория на виртуальную машину
      - name: Checkout code
        # 'uses' означает использование готового экшена (action) от сообщества или GitHub
        # 'actions/checkout@v4' — стандартный экшен для скачивания кода
        uses: actions/checkout@v4

      # Шаг 2: Установка Java Development Kit (JDK)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        # 'with' передает параметры в экшен
        with:
          java-version: '17'
          # 'temurin' — это популярный, свободный дистрибутив OpenJDK
          distribution: 'temurin'

      # Шаг 3: Выдача прав на исполнение для Gradle Wrapper(по умолчанию не имеют права на запуск)
      - name: Grant execute permission for gradlew
        # 'run' выполняет команду в терминале раннера
        run: chmod +x gradlew

      # Шаг 4: Запуск юнит-тестов
      - name: Restore google-services.json 
        run: echo "${{ secrets.ANDROID_GOOGLE_SERVICES_JSON }}" | base64 --decode > app/google-services.json
      - name: Run Unit Tests
        # run: ./gradlew test --tests "*UnitTest" --continue
        run: ./gradlew testDebugUnitTest --continue

      # Шаг 5: Сохранение результатов Allure
      # 'if: always()' этот шаг будет выполнен ВСЕГДА - получим отчет, даже если запуск тестов провалился
      - name: Store Allure results
        if: always()
        # 'actions/upload-artifact@v4' — экшен для сохранения артефактов для использования в других задачах
        uses: actions/upload-artifact@v4
        with:
          # 'name' — уникальное имя для нашего архива с результатами
          name: allure-results-unit
          # 'path' — путь к файлам, которые нужно сохранить, '**/build/allure-results' найдет папку  в любом модуле проекта
          path: '**/build/allure-results'


  integration-tests:
    name: Integration Tests
    # 'needs: unit-tests' — зависимость, задача не начнется, пока 'unit-tests' не завершится УСПЕШНО
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      # 1. Скачивает и кэширует компоненты Android SDK
      # 2. Создает и запускает эмулятор с указанным API level
      # 3. Ждет его полной загрузки
      # 4. Выполняет команду из 'script'
      # 5. Гасит эмулятор после завершения
      - name: Restore google-services.json 
        run: echo "${{ secrets.ANDROID_GOOGLE_SERVICES_JSON }}" | base64 --decode > app/google-services.json
      - name: Run Integration Tests from Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          # Версия Android для эмулятора
          api-level: 30
          # Явно указываем архитектуру ARM64, чтобы она соответствовала Apple Silicon
          arch: arm64-v8a
          # Кастомная Gradle-задачу, которая выполняет тесты и выгружает отчеты
          script: ./gradlew connectedDebugAndroidTest --continue
      - name: Store Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-integration
          path: '**/build/allure-results'
      # - name: Run Integration Tests
      #   # run: ./gradlew test --tests "*IntegrationTest" --continue
      #   run: ./gradlew connectedDebugAndroidTest --continue 
      # - name: Store Allure results
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: allure-results-integration
      #     path: '**/build/allure-results'


  android-tests:
    name: E2E Tests
    needs: integration-tests
    # 'macos-latest' — тк раннеры macOS предоставляют аппаратное ускорение (VT-x),
    # необходимое для быстрой работы эмулятора Android. На Linux-раннерах это часто не работает.
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      # 1. Скачивает и кэширует компоненты Android SDK
      # 2. Создает и запускает эмулятор с указанным API level
      # 3. Ждет его полной загрузки
      # 4. Выполняет команду из 'script'
      # 5. Гасит эмулятор после завершения
      - name: Restore google-services.json 
        run: echo "${{ secrets.ANDROID_GOOGLE_SERVICES_JSON }}" | base64 --decode > app/google-services.json
      - name: Run E2E Tests and Pull Report from Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          # Версия Android для эмулятора
          api-level: 30
          # Явно указываем архитектуру ARM64, чтобы она соответствовала Apple Silicon
          arch: arm64-v8a
          # Кастомная Gradle-задачу, которая выполняет тесты и выгружает отчеты
          script: ./gradlew app:runAndroidTestsWithoutUninstallForGetAllureData
      - name: Store Allure results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-e2e
          path: '**/build/allure-results'


  generate-report:
    name: Generate Allure Report
    # Ждем завершения всех тестовых задач
    needs: [unit-tests, integration-tests, android-tests]
    # 'if: always()' — задача запустится и отчет сгенерируется в любом случае
    if: always()
    runs-on: ubuntu-latest
    # 'permissions' — запрашиваем у GitHub права на запись в репозиторий.
    # Чтобы экшен 'actions-gh-pages' мог отправить отчет в ветку 'gh-pages'
    permissions:
      contents: write
    steps:
      # Шаг 1: Скачивает все артефакты этого воркфлоу
      - name: Download all Allure results
        uses: actions/download-artifact@v4
        with:
          # Они будут скачаны в подпапки: allure-results/allure-results-unit, .../allure-results-integration, и т.д.
          path: allure-results

      # Шаг 2: Объединяем все результаты в одну папку
      # Экшен Allure ожидает, что все .json файлы будут лежать в одной директории
      - name: Consolidate results
        run: |
          mkdir -p allure-results-final
          find allure-results -type f -exec mv {} allure-results-final/ \;

      # Шаг 3: Скачиваем предыдущий отчет (историю) из ветки gh-pages
      - name: Load test report history
        uses: actions/checkout@v4
        # 'if: always()' и 'continue-on-error: true' гарантируют, что воркфлоу не упадет,
        # если ветка gh-pages еще не существует
        if: always()
        continue-on-error: true
        with:
          # Указываем, что нужно скачать содержимое ветки 'gh-pages'
          ref: gh-pages
          # Скачиваем ее в отдельную папку, чтобы не смешивать с основным кодом
          path: gh-pages
          
      # Шаг 4: Генерация HTML-отчета Allure
      - name: Generate Allure Report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          # Путь, где лежат .json файлы с результатами текущего запуска
          allure_results: allure-results-final
          # Путь, где лежит история из предыдущих запусков
          allure_history: allure-history
          # Указываем, где лежит папка с предыдущим отчетом
          gh_pages: gh-pages

      # Шаг 5: Публикация сгенерированного отчета в ветку gh-pages
      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          # ${{ secrets.GITHUB_TOKEN }} — это специальный, временный токен, который GitHub
          # автоматически предоставляет для авторизации действий внутри репозитория
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Явно указываем, что публиковать нужно в ветку 'gh-pages'.
          publish_branch: gh-pages
          # Папка куда нужно опубликовать
          publish_dir: allure-history
